# Generated by Django 5.0.10 on 2025-01-07 16:06

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID', db_column='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password', db_column='PASSWORD')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login', db_column='LAST_LOGIN')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status', db_column='IS_SUPERUSER')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name', db_column='FIRST_NAME')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name', db_column='LAST_NAME')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status', db_column='IS_STAFF')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active', db_column='IS_ACTIVE')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined', db_column='DATE_JOINED')),
                ('email', models.EmailField(max_length=254, unique=True, db_column='EMAIL')),
                ('is_logged_out', models.BooleanField(default=True, db_column='IS_LOGGED_OUT')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups', db_column='GROUPS')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions', db_column='USER_PERMISSIONS')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]

